
--====================
DECLARE
    v_sql      CLOB;
    v_day      VARCHAR2(20);
    v_last_day NUMBER;
    v_chunk    VARCHAR2(32767);

BEGIN
    v_sql := 'SELECT 
                SO.SO_ID,
                UM.USER_NAME AS SALE_OFFER,
                SO.ORDER_DATE,
                SUM(distinct SOD.NO_BAGS) AS TOTAL_BAGS';  -- Removed DISTINCT from SUM()

    v_last_day := TO_NUMBER(TO_CHAR(LAST_DAY(SYSDATE), 'DD'));

    -- Loop for generating dynamic pivot columns
    FOR i IN 1..v_last_day LOOP
        v_day := TO_CHAR(TRUNC(SYSDATE, 'MM') + (i - 1), 'DD-MON-YYYY');

        v_sql := v_sql || ' ,
                     CASE 
                         WHEN TRUNC(SO.ORDER_DATE) = TO_DATE(''' || v_day || ''', ''DD-MON-YYYY'') 
                         THEN SOD.NO_BAGS
                         ELSE NULL
                     END AS "' || v_day || '"';
    END LOOP;

    -- Constructing the rest of the query
    v_sql := v_sql || ' 
        FROM AB_SO_ORDER_HEAD SO
        left JOIN AB_SO_ORDER_DET SOD ON SOD.SO_ID = SO.SO_ID
        LEFT JOIN (SELECT DISTINCT DET_ID FROM AB_LOOKUP_DETAIL) LD  
            ON (LD.DET_ID = SO.FREIGHT_TYPE_ID 
                OR LD.DET_ID = SO.DELIVERY_STATUS 
                OR LD.DET_ID = SO.PAYMENT_ID)
        LEFT JOIN (SELECT DISTINCT SR_ID FROM AB_SETUP_REGISTRATION) ASR  
           ON (ASR.SR_ID = SO.CUSTOMER_ID)  -- Removed SOD.WAREHOUSE_ID since it caused an error
           
        LEFT JOIN AB_UM_APPLICATION_USERS UM  
            ON UM.USER_ID = SO.SALE_OFFER_ID
        WHERE SO.SO_TYPE = ''SALE ORDER''  
          AND SO.ORG_ID = :GV_ORG_ID
          AND SO.STATUS = ''Y'' 
          AND SOD.STATUS = ''Y''
          AND TRUNC(SO.ORDER_DATE) >= TRUNC(SYSDATE, ''MM'')
          AND UM.USER_ID = NVL(:P498_SALE_OFFICER,UM.USER_ID)
      GROUP BY SO.SO_ID, UM.USER_NAME, SO.ORDER_DATE,  SOD.NO_BAGS';

    -- Debugging: Print the SQL query in chunks to avoid buffer overflow
    FOR i IN 0 .. CEIL(DBMS_LOB.GETLENGTH(v_sql)/ 32767) - 1 
    LOOP
        v_chunk := DBMS_LOB.SUBSTR(v_sql   , 32767, i * 32767 + 1);
        DBMS_OUTPUT.PUT_LINE(v_chunk);
    END LOOP;
    
    RETURN v_sql;
END;


